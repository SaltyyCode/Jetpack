JETPACK NETWORK PROTOCOL - SPECIFICATION
========================================

Author: Flying Bytes
Project: Jetpack
Protocol Version: 1.0
Date: 2025
Status: FINAL
Category: Standards Track

────────────────────────────────────────────────────────────
1. OVERVIEW
────────────────────────────────────────────────────────────

This document defines the network protocol used by the Jetpack project.
It describes how the server and clients communicate over TCP using binary packets.

────────────────────────────────────────────────────────────
2. PACKET STRUCTURE
────────────────────────────────────────────────────────────

Each packet starts with a 3-byte header:

        ┌────────────┬─────────────┬─────────────┐
        │ Type (1B)  │ Len MSB (1B)│ Len LSB (1B)│
        └────────────┴─────────────┴─────────────┘
                          |
                          v
                    [ Payload (0..65535 B) ]

- Type: 1-byte packet type
- Length: 16-bit big-endian payload length
- Payload: optional (may be 0)

────────────────────────────────────────────────────────────
3. PACKET TYPES
────────────────────────────────────────────────────────────

──────────── CLIENT -> SERVER ─────────────

0x01  LOGIN_REQUEST
      -> Client requests to join the game
      -> Payload: optional [number_of_players] (sent only by the first client)

0x05  PLAYER_ACTION
      -> Payload: [1 byte action code]
         • 0x01 = Jump

──────────── SERVER -> CLIENT ─────────────

0x02  LOGIN_RESPONSE
      -> Payload: [player_id][0x00][expected_player_count]
      Example:
        ┌────────────┬────────┬────────────┐
        │ ID = 0x02  │ Sep=0  │ Expect=0x03│
        └────────────┴────────┴────────────┘

0x03  MAP_TRANSFER
      -> Payload: [player_id][map_bytes with '\n']
      Example:
        ┌──────────┬──────────────────────┐
        │ PlayerID │ "_\n_\n_\nccc\n" ... │
        └──────────┴──────────────────────┘

0x04  GAME_START
      -> Payload: none

0x06  GAME_STATE
      -> Payload: repeating blocks [id][alive]
      Example:
        [0x00 0x01  0x01 0x00  0x02 0x01]

0x07  POSITION_UPDATE
      -> Payload: [id][float x][float y]
        Total: 9 bytes

0x08  COIN_EVENT (optional)
      -> Payload: [id][int x][int y]

0x09  PLAYER_ELIMINATED
      -> Payload: [id]

0x0A  ACTION_ACK
      -> Sent by server to confirm a received PLAYER_ACTION
      -> Payload: [0x05] (the original action type)

        ┌─────────────────────┐
        │ ACTION_ACK (0x0A)   │
        └──────┬──────────────┘
               ↓
          [ 0x05 ] ← confirms jump received

0x0B  WAITING_PLAYERS_COUNT
      -> Payload: [number_of_connected_players]

0x10  GAME_OVER
      -> Payload: [winner_id] or 255 if draw

────────────────────────────────────────────────────────────
4. ACTION TYPES
────────────────────────────────────────────────────────────

Currently defined:

- 0x01 -> Jump

────────────────────────────────────────────────────────────
5. FRAGMENTATION (for large payloads like MAP_TRANSFER)
────────────────────────────────────────────────────────────

Maximum packet fragment size: `FRAGMENT_SIZE = 1024` bytes

When payload exceeds 1024 bytes:

- The first fragment contains:
    - 3-byte header
    - First 1024 bytes

- Remaining fragments:
    - Raw payload chunks of max 1024 bytes
    - No additional headers

Example: sending 2500 bytes
────────────────────────────

1. Header + 1024 bytes
2. Next 1024 bytes
3. Remaining 452 bytes

Client side logic:
──────────────────
- Read 3-byte header
- Read `length` bytes into buffer (multiple reads if needed)

Diagram:
────────
         Socket Stream ->
        ┌────┬────┬────┐────────┐────────┐─────┐
        │  T │ MS │ LS │ Chunk1 │ Chunk2 │ ... │
        └────┴────┴────┘────────┘────────┘─────┘
         type  len           payload (split)

────────────────────────────────────────────────────────────
6. CONSTANTS
────────────────────────────────────────────────────────────

FRAGMENT_SIZE           = 1024
MAX_PLAYERS             = 9
DEFAULT_EXPECTED_PLAYERS = 2

────────────────────────────────────────────────────────────
7. PACKET EXAMPLES
────────────────────────────────────────────────────────────

LOGIN_REQUEST (no payload):
  -> [0x01][0x00][0x00]

LOGIN_RESPONSE (ID = 2, expecting 4 players):
  -> [0x02][0x00][0x03] [0x02, 0x00, 0x04]

PLAYER_ACTION (jump):
  -> [0x05][0x00][0x01] [0x01]

ACTION_ACK:
  -> [0x0A][0x00][0x01] [0x05]

GAME_STATE:
  -> [0x06][0x00][0x06] [0x00 0x01  0x01 0x00  0x02 0x01]

